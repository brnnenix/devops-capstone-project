# This pipeline needs the following tasks from Tekton Hub
#   - git-clone
#   - flake8
#
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cd-pipeline
spec:
  workspaces:
    - name: pipeline-workspace
  params:
    - name: repo-url
      description: The GitHub repository name (e.g. devops-capstone-project.git)
    - name: branch
      description: The Git branch to clone
      default: main
    - name: GITHUB_USERNAME
      description: The GitHub username for authentication
    - name: build-image
      description: Build the image
  tasks:
    - name: init
      workspaces:
        - name: source
          workspace: pipeline-workspace          
      taskRef:
        name: cleanup

    - name: clone
      workspaces:
        - name: output
          workspace: pipeline-workspace          
      taskRef:
        name: git-clone
      params:
        - name: url
          value: https://github.com/brnnenix/devops-capstone-project.git
        - name: revision
          value: $(params.branch)
      runAfter:
        - init

    - name: lint
      workspaces:
        - name: source
          workspace: pipeline-workspace  # This should match the workspace required by flake8
      taskRef:
        name: flake8  # Changed taskRef to flake8
      params:
        - name: image
          value: "python:3.9-slim"  # Set image parameter for flake8
        - name: args
          value: ["--count", "--max-complexity=10", "--max-line-length=127", "--statistics"]  # Arguments for flake8
      runAfter:
        - clone  # Ensure lint runs after clone

    - name: tests
      workspaces:
        - name: source
          workspace: pipeline-workspace
      taskRef:
        name: nose
      params:
      - name: database_uri
        value: "sqlite:///test.db"
      - name: args
        value: "-v --with-spec --spec-color"
      runAfter:
        - clone

    - name: build
      workspaces:
        - name: source
          workspace: pipeline-workspace
      taskRef:
        name: buildah
        kind: ClusterTask
      params:
      - name: IMAGE
        value: "$(params.build-image)"
      runAfter:
        - tests
        - lint

    - name: deploy
      workspaces:
        - name: manifest-dir
          workspace: pipeline-workspace
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
      - name: SCRIPT
        value: |
          echo "Updating manifest..."
          sed -i "s|IMAGE_NAME_HERE|$(params.build-image)|g" deploy/deployment.yaml
          cat deploy/deployment.yaml
          echo "Deploying to OpenShift..."
          oc apply -f deploy/
          oc get pods -l app=accounts
      runAfter:
        - build